// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MomentumAPI.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MomentumAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251029195913_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MomentumAPI.Models.ManualCheckin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AteBreakfast")
                        .HasColumnType("boolean")
                        .HasColumnName("ate_breakfast");

                    b.Property<int?>("CaffeineMg")
                        .HasColumnType("integer")
                        .HasColumnName("caffeine_mg");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal?>("DeepWorkHours")
                        .HasColumnType("numeric")
                        .HasColumnName("deep_work_hours");

                    b.Property<int?>("EnergyAfternoon")
                        .HasColumnType("integer")
                        .HasColumnName("energy_afternoon");

                    b.Property<int?>("EnergyEvening")
                        .HasColumnType("integer")
                        .HasColumnName("energy_evening");

                    b.Property<int?>("EnergyMorning")
                        .HasColumnType("integer")
                        .HasColumnName("energy_morning");

                    b.Property<int?>("ExerciseDuration")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_duration");

                    b.Property<int?>("ExerciseIntensity")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_intensity");

                    b.Property<string>("ExerciseType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("exercise_type");

                    b.Property<string>("Mood")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mood");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<int?>("ProductivityRating")
                        .HasColumnType("integer")
                        .HasColumnName("productivity_rating");

                    b.Property<int?>("ScreenTimeBeforeBed")
                        .HasColumnType("integer")
                        .HasColumnName("screen_time_before_bed");

                    b.Property<decimal?>("SleepHours")
                        .HasColumnType("numeric")
                        .HasColumnName("sleep_hours");

                    b.Property<string>("SleepNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("sleep_notes");

                    b.Property<int?>("SleepQuality")
                        .HasColumnType("integer")
                        .HasColumnName("sleep_quality");

                    b.Property<int?>("StressLevel")
                        .HasColumnType("integer")
                        .HasColumnName("stress_level");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("WaterGlasses")
                        .HasColumnType("integer")
                        .HasColumnName("water_glasses");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Date")
                        .IsUnique();

                    b.ToTable("manual_checkins", (string)null);
                });

            modelBuilder.Entity("MomentumAPI.Models.RawHealthData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("data_type");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("RawJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("raw_json");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source");

                    b.HasKey("Id");

                    b.HasIndex("Date", "Source");

                    b.ToTable("raw_health_data", (string)null);
                });

            modelBuilder.Entity("MomentumAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<bool>("OnboardingComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("onboarding_complete");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("SubscriptionTier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subscription_tier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MomentumAPI.Models.ManualCheckin", b =>
                {
                    b.HasOne("MomentumAPI.Models.User", "User")
                        .WithMany("ManualCheckins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MomentumAPI.Models.User", b =>
                {
                    b.Navigation("ManualCheckins");
                });
#pragma warning restore 612, 618
        }
    }
}
